<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Docker on 秋水·JamesNULLiu</title><link>https://jamesnulliu.github.io/tags/docker/</link><description>Recent content in Docker on 秋水·JamesNULLiu</description><generator>Hugo -- 0.148.2</generator><language>en</language><copyright>2024-2025 JamesNULLiu</copyright><lastBuildDate>Fri, 12 Sep 2025 22:46:13 +0000</lastBuildDate><atom:link href="https://jamesnulliu.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>Docker Container with Nvidia GPU Support</title><link>https://jamesnulliu.github.io/blogs/docker-container-with-nvidia-gpu-support/</link><pubDate>Thu, 08 Aug 2024 12:00:00 +0800</pubDate><guid>https://jamesnulliu.github.io/blogs/docker-container-with-nvidia-gpu-support/</guid><description>How to create a Docker container with Nvidia GPU support.</description><content:encoded><![CDATA[<blockquote>
<p>Offical Docs:</p>
<ol>
<li><a href="https://docs.docker.com/engine/install/ubuntu/">Install Docker Engine on Ubuntu</a></li>
<li><a href="https://docs.docker.com/engine/install/centos/">Install Docker Engine on CentOS</a></li>
<li><a href="https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/install-guide.html">Installing the NVIDIA Container Toolkit</a></li>
</ol></blockquote>
<h2 id="1-installation">1. Installation</h2>
<h3 id="11-uninstall-docker">1.1. Uninstall Docker</h3>
<p>For Ubuntu/Debian:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># Uninstall old versions</span>
</span></span><span class="line"><span class="cl">sudo apt-get remove docker.io docker-doc docker-compose docker-compose-v2 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    podman-docker containerd runc
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Uninstall docker engine</span>
</span></span><span class="line"><span class="cl">sudo apt-get purge docker-ce docker-ce-cli containerd.io docker-buildx-plugin <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    docker-compose-plugin docker-ce-rootless-extras
</span></span></code></pre></td></tr></table>
</div>
</div><p>For CentOS/RHEL:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># Uninstall old versions</span>
</span></span><span class="line"><span class="cl">sudo yum remove docker docker-client docker-client-latest docker-common <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    docker-latest docker-latest-logrotate docker-logrotate docker-engine
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Uninstall docker engine</span>
</span></span><span class="line"><span class="cl">sudo yum remove docker-ce docker-ce-cli containerd.io docker-buildx-plugin <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    docker-compose-plugin docker-ce-rootless-extras
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo rm -rf /var/lib/docker
</span></span><span class="line"><span class="cl">sudo rm -rf /var/lib/containerd
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="12-install-docker">1.2. Install Docker</h3>
<p>For Ubuntu/Debian:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># Add Docker&#39;s official GPG key:</span>
</span></span><span class="line"><span class="cl">sudo apt-get update
</span></span><span class="line"><span class="cl">sudo apt-get install ca-certificates curl
</span></span><span class="line"><span class="cl">sudo install -m <span class="m">0755</span> -d /etc/apt/keyrings
</span></span><span class="line"><span class="cl">sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -o /etc/apt/keyrings/docker.asc
</span></span><span class="line"><span class="cl">sudo chmod a+r /etc/apt/keyrings/docker.asc
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Add the repository to Apt sources:</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="s2">&#34;deb [arch=</span><span class="k">$(</span>dpkg --print-architecture<span class="k">)</span><span class="s2"> signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
</span></span></span><span class="line"><span class="cl"><span class="s2">  </span><span class="k">$(</span>. /etc/os-release <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="s2">&#34;</span><span class="nv">$VERSION_CODENAME</span><span class="s2">&#34;</span><span class="k">)</span><span class="s2"> stable&#34;</span> <span class="p">|</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Install Docker Engine:</span>
</span></span><span class="line"><span class="cl">sudo apt-get update
</span></span><span class="line"><span class="cl">sudo apt-get install docker-ce docker-ce-cli containerd.io <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    docker-buildx-plugin docker-compose-plugin
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Enable and start the Docker service:</span>
</span></span><span class="line"><span class="cl">sudo systemctl <span class="nb">enable</span> docker
</span></span><span class="line"><span class="cl">sudo systemctl start docker
</span></span></code></pre></td></tr></table>
</div>
</div><p>For CentOS/RHEL:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo yum install -y yum-utils
</span></span><span class="line"><span class="cl">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo yum install docker-ce docker-ce-cli containerd.io docker-buildx-plugin <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    docker-compose-plugin
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo systemctl <span class="nb">enable</span> docker
</span></span><span class="line"><span class="cl">sudo systemctl start docker
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="13-install-nvidia-container-toolkit">1.3. Install Nvidia Container Toolkit</h3>
<p>For Ubuntu/Debian:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey <span class="p">|</span> sudo gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="o">&amp;&amp;</span> curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list <span class="p">|</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    sed <span class="s1">&#39;s#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g&#39;</span> <span class="p">|</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    sudo tee /etc/apt/sources.list.d/nvidia-container-toolkit.list
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Optionally, configure the repository to use experimental packages:</span>
</span></span><span class="line"><span class="cl">sed -i -e <span class="s1">&#39;/experimental/ s/^#//g&#39;</span> /etc/apt/sources.list.d/nvidia-container-toolkit.list
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo apt-get update
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo apt-get install -y nvidia-container-toolkit
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo systemctl restart docker
</span></span></code></pre></td></tr></table>
</div>
</div><p>For CentOS/RHEL:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -s -L https://nvidia.github.io/libnvidia-container/stable/rpm/nvidia-container-toolkit.repo <span class="p">|</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  sudo tee /etc/yum.repos.d/nvidia-container-toolkit.repo
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Optionally, configure the repository to use experimental packages:</span>
</span></span><span class="line"><span class="cl">sudo yum-config-manager --enable nvidia-container-toolkit-experimental
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo yum install -y nvidia-container-toolkit
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo systemctl restart docker
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="2-create-a-container">2. Create a Container</h2>
<p>Choose a base image that supports Nvidia GPU in doker hub of <a href="https://hub.docker.com/r/nvidia/cuda/">nvidia/cuda</a>, run the following command to create a container:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -it  <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --gpus all <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --name &lt;container_name&gt; <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v <span class="nv">$HOME</span>/data:/root/data <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -p &lt;host_port&gt;:&lt;container_port&gt; <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --entrypoint /bin/bash <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --shm-size &lt;shm-size&gt;G <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    &lt;image_name&gt;:&lt;tag&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>If you need a concise mannual for docker images and containers, see this blog: <a href="/blogs/something-about-docker/">Something about Docker</a></p>
]]></content:encoded></item><item><title>Something about Docker</title><link>https://jamesnulliu.github.io/blogs/something-about-docker/</link><pubDate>Thu, 08 Aug 2024 12:00:00 +0800</pubDate><guid>https://jamesnulliu.github.io/blogs/something-about-docker/</guid><description>Something about docker.</description><content:encoded><![CDATA[<blockquote>
<p>Check this blog if you want a <a href="/blogs/docker-container-with-nvidia-gpu-support/">Docker Container with Nvidia GPU Support</a>.</p></blockquote>
<h2 id="1-about-image">1. About Image</h2>
<h3 id="11-check-existing-images-and-statistics">1.1. Check Existing Images and Statistics</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># List all images</span>
</span></span><span class="line"><span class="cl">docker images
</span></span><span class="line"><span class="cl"><span class="c1"># Check disk usage of docker (images, conatiners)</span>
</span></span><span class="line"><span class="cl">docker system df
</span></span></code></pre></td></tr></table>
</div>
</div><p>To list all images not being used by any container, run:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker images --filter <span class="s2">&#34;dangling=false&#34;</span> -q <span class="p">|</span> xargs -r docker inspect --format <span class="s1">&#39;{{ .Id }} {{ .RepoTags }}&#39;</span> <span class="p">|</span> grep -v <span class="s1">&#39;&lt;none&gt;&#39;</span> <span class="p">|</span> <span class="k">while</span> <span class="nb">read</span> id tags<span class="p">;</span> <span class="k">do</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> ! docker ps -a --format <span class="s1">&#39;{{.Image}}&#39;</span> <span class="p">|</span> grep -q <span class="s2">&#34;</span><span class="k">$(</span><span class="nb">echo</span> <span class="nv">$tags</span> <span class="p">|</span> cut -d<span class="s1">&#39;[&#39;</span> -f2 <span class="p">|</span> cut -d<span class="s1">&#39;]&#39;</span> -f1<span class="k">)</span><span class="s2">&#34;</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span> <span class="s2">&#34;</span><span class="nv">$id</span><span class="s2"> </span><span class="nv">$tags</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">fi</span>
</span></span><span class="line"><span class="cl"><span class="k">done</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="12-rename-an-image">1.2. Rename an Image</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker tag &lt;image-id&gt; &lt;image-name&gt;:&lt;image-tag&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="13-pull-an-image">1.3. Pull an Image</h3>
<p>Search for an image in <a href="https://hub.docker.com/">Docker Hub</a>.</p>
<p>Pull the image by running:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker pull &lt;image-name&gt;:&lt;image-tag&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>Or download the layers to <code>&lt;dir-path&gt;</code> by using <a href="https://github.com/moby/moby/blob/master/contrib/download-frozen-image-v2.sh">this script</a>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir -p &lt;dir-path&gt;  <span class="c1"># Directory to store the layers</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">bash download-frozen-image-v2.sh &lt;dir-path&gt; &lt;image-name&gt;:&lt;image-tag&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Load the image</span>
</span></span><span class="line"><span class="cl">tar -cC &lt;dir-path&gt; . <span class="p">|</span> docker load
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="14-build-an-image">1.4. Build an Image</h3>
<p>Use a Dockerfile to build a new image based on an existing image.</p>
<p>Check this example project: <a href="https://github.com/jamesnulliu/deeplearning-docker-build/blob/main/Dockerfile" target="_blank" rel="noopener noreferrer">
    jamesnulliu/deeplearning-docker-build
</a>
.</p>
<p>The following command in <a href="https://github.com/jamesnulliu/deeplearning-docker-build/blob/main/scripts/build.sh" target="_blank" rel="noopener noreferrer">
    ./scripts/build.sh
</a>
 would build image <code>&lt;image-name&gt;:&lt;image-tag&gt;</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker build <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -f Dockerfile <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -t jamesnulliu/deeplearning:torch2.6-cuda12.6-ubuntu24.04 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    .
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>Note that <code>.</code> specifiles the build context, where docker can reference (e.g., <code>COPY</code> and <code>ADD</code>) the containing files during the build process. You can change it to other directory path according to your needs.</p></blockquote>
<p>You will find the new image after building by runing <code>docker images</code>.</p>
<h3 id="15-save-an-image-to-a-tar-file">1.5. Save an Image to a tar File</h3>
<p>To export an image to a tar file with reusable layer imformations, run the following command:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker save -o &lt;some-name&gt;.tar &lt;image-name&gt;:&lt;image-tag&gt;
</span></span><span class="line"><span class="cl"><span class="c1"># Or</span>
</span></span><span class="line"><span class="cl">docker save -o &lt;some-name&gt;.tar &lt;image-id&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>See <a href="/blogs/something-about-docker/#16-load-an-image">1.6. Load an Image</a> to load the generated tar file to an image.</p>
<h3 id="16-load-an-image">1.6. Load an Image</h3>
<p>Suppose you have a tar file <code>&lt;some-name&gt;.tar</code>, if the file is generated by <code>docker save</code> (see <a href="/blogs/something-about-docker/#15-save-an-image-to-a-tar-file">1.5. Save an Image to a tar File</a>), load the image by running:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker load -i &lt;some-name&gt;.tar
</span></span></code></pre></td></tr></table>
</div>
</div><p>Or if the file is generated by <code>docker export</code> (see <a href="/blogs/something-about-docker/#24-export-a-container-to-a-tar-file">2.4 Export a container to a tar File</a>), load the container to an image by running:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker import &lt;some-name&gt;.tar &lt;image-name&gt;:&lt;image-tag&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="17-remove-an-image">1.7. Remove an Image</h3>
<p>Before removing an image, you need to:</p>
<ul>
<li>Stop containers using the image: <code>docker stop &lt;container-id&gt;</code>.</li>
<li>Remove containers using the image: <code>docker rm &lt;container-id&gt;</code>.</li>
</ul>
<p>Then remove the image:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker rmi &lt;image-name&gt;:&lt;image-tag&gt;
</span></span><span class="line"><span class="cl"><span class="c1"># Or</span>
</span></span><span class="line"><span class="cl">docker rmi &lt;image-id&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="2-about-container">2. About Container</h2>
<h3 id="21-check-existing-containers-and-statistics">2.1. Check Existing Containers and Statistics</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># List running/[all] containers</span>
</span></span><span class="line"><span class="cl">docker ps <span class="o">[</span>-a<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Check statistics of all/[some] containers</span>
</span></span><span class="line"><span class="cl">docker stats <span class="o">[</span>&lt;container-id&gt;<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Check disk usage of docker (images, conatiners)</span>
</span></span><span class="line"><span class="cl">docker system df
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="22-create-a-container">2.2. Create a Container</h3>
<p>Basic Parameters:</p>
<details class="custom-details">
    <summary class="custom-summary">Click to expand</summary>
    <div><ul>
<li><code>-it</code>: Interactive mode with pseudo-TTY terminal</li>
<li><code>--name &lt;container-name&gt;</code>: Assign a name to the container for easier reference</li>
<li><code>-p &lt;host-port&gt;:&lt;container-port&gt;</code>: Map host port to container port (e.g. <code>8888:22</code>)</li>
<li><code>--entrypoint /bin/bash</code>: Override default entrypoint with bash shell</li>
<li><code>&lt;image-name&gt;</code>: Name of the Docker image to use (e.g. <code>ubuntu</code>, <code>nvidia/cuda</code>)</li>
<li><code>&lt;image-tag&gt;</code>: Version/tag of the image (e.g. <code>latest</code>, <code>20.04</code>)</li>
</ul>
</div>
</details><br>
<p>Additional Options:</p>
<details class="custom-details">
    <summary class="custom-summary">Click to expand</summary>
    <div><ul>
<li><code>--shm-size &lt;shm-size&gt;G</code>: Set size of /dev/shm (shared memory) in GB (e.g. <code>2G</code>)</li>
<li><code>--gpus all</code>: [Optional] Give container access to all GPUs (requires nvidia-docker)</li>
<li><code>-v &lt;host-path&gt;:&lt;container-path&gt;</code>: Mount host directory into container</li>
<li><code>-e KEY=VALUE</code>: Set environment variables</li>
<li><code>--network=host</code>: Use host network stack; If set, <code>-p</code> is not needed, and you can access host services directly with <code>localhost</code></li>
<li><code>--ipc=host</code>: Use host IPC namespace</li>
<li><code>--privileged</code>: Give extended privileges to container</li>
<li><code>-u $(id -u):$(id -g)</code>: Run as current user instead of root</li>
<li><code>--rm</code>: Automatically remove container when it exits</li>
</ul>
</div>
</details><br>
<p>Example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># Create and run a container from &lt;image-name&gt;:&lt;image-tag&gt;</span>
</span></span><span class="line"><span class="cl">docker run -it <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --gpus all <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --name &lt;container-name&gt; <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -p &lt;host-port&gt;:&lt;container-port&gt; <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --entrypoint /bin/bash <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --shm-size &lt;shm-size&gt;G <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    &lt;image-name&gt;:&lt;image-tag&gt;
</span></span><span class="line"><span class="cl"><span class="c1"># Now you are in the container.</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>To exit container and return to host, run <code>exit</code>, which will stop the containter; Or type <code>Ctrl+P+Q</code>, which will detach from container without stopping it.</p>
<h3 id="23-start-stop-remove-and-rename-a-container">2.3. Start, Stop, Remove and Rename a Container</h3>
<p>Start a container:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker start &lt;container-name&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>Attach to a container:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker <span class="nb">exec</span> -it &lt;container-name&gt; bash
</span></span></code></pre></td></tr></table>
</div>
</div><p>Stop a container:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker stop &lt;contianer-name&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>Remove a container:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker rm &lt;container-name&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>Rename a container:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker rename &lt;container-id&gt; &lt;new-name&gt;
</span></span><span class="line"><span class="cl"><span class="c1"># or</span>
</span></span><span class="line"><span class="cl">docker rename &lt;old-name&gt; &lt;new-name&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="24-export-a-container-to-a-tar-file">2.4. Export a Container to a tar File</h3>
<p>Note that <code>docker export</code> only exports the container&rsquo;s filesystem without layer information. It is more recommended to use <code>docker save</code> to save a image to a tar file (see <a href="/blogs/something-about-docker/#15-save-an-image-to-a-tar-file">1.5. Save an Image to a tar File</a>).</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker <span class="nb">export</span> &lt;container-id&gt; &gt; &lt;some-name&gt;.tar
</span></span></code></pre></td></tr></table>
</div>
</div><p>See <a href="/blogs/something-about-docker/#16-load-an-image">1.6. Load an Image</a> to load the generated tar file to an image.</p>
<h2 id="3-change-docker-root-directory-to-a-different-location">3. Change Docker Root Directory to a Different Location</h2>
<p>Check current docker root directory:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker info <span class="p">|</span> grep <span class="s2">&#34;Docker Root Dir&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Stop docker daemon:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">systemctl stop docker
</span></span></code></pre></td></tr></table>
</div>
</div><p>Edit (or create) the docker configuration file:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">vim /etc/docker/daemon.json
</span></span></code></pre></td></tr></table>
</div>
</div><p>Add or modify the configuration:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;data-root&#34;</span><span class="p">:</span> <span class="s2">&#34;&lt;target-docker-root&gt;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Copy the existing docker data to target location:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">rsync -aP &lt;current-docker-root&gt; &lt;target-docker-root&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>Restart docker daemon:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">systemctl daemon-reload
</span></span><span class="line"><span class="cl">systemctl start docker
</span></span></code></pre></td></tr></table>
</div>
</div><p>Verify the new location:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker info <span class="p">|</span> grep <span class="s2">&#34;Docker Root Dir&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded></item></channel></rss>